import type { WidgetType } from "@huggingface/tasks";
import type { InferenceProvider, ModelId } from "../types";
export declare const inferenceProviderMappingCache: Map<string, Partial<Record<"black-forest-labs" | "cerebras" | "cohere" | "fal-ai" | "fireworks-ai" | "hf-inference" | "hyperbolic" | "nebius" | "novita" | "openai" | "replicate" | "sambanova" | "together", Omit<InferenceProviderModelMapping, "hfModelId" | "adapterWeightsPath">>>>;
export type InferenceProviderMapping = Partial<Record<InferenceProvider, Omit<InferenceProviderModelMapping, "hfModelId" | "adapterWeightsPath">>>;
export interface InferenceProviderModelMapping {
    adapter?: string;
    adapterWeightsPath?: string;
    hfModelId: ModelId;
    providerId: string;
    status: "live" | "staging";
    task: WidgetType;
}
export declare function getInferenceProviderMapping(params: {
    accessToken?: string;
    modelId: ModelId;
    provider: InferenceProvider;
    task: WidgetType;
}, options: {
    fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
}): Promise<InferenceProviderModelMapping | null>;
//# sourceMappingURL=getInferenceProviderMapping.d.ts.map